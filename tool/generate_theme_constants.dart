import 'dart:io';
import 'package:yaml/yaml.dart';

class ThemeColorInfo {
  final String id;
  final String hex;

  ThemeColorInfo(this.id, this.hex);
}

void main() {
  final inputFile = File('config/theme_colors.yaml');
  final outputFile = File('lib/gen/theme_constants.g.dart');

  if (!inputFile.existsSync()) return;

  final content = inputFile.readAsStringSync();
  final yaml = loadYaml(content) as YamlMap;
  final colorsList = yaml['colors'] as YamlList;

  final List<ThemeColorInfo> themeColors = [];
  for (final item in colorsList) {
    themeColors.add(ThemeColorInfo(item['id'], item['hex']));
  }

  final buffer = StringBuffer();

  buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
  buffer.writeln('// Generated by tool/generate_theme_constants.dart');
  buffer.writeln('');
  buffer.writeln("import 'package:flutter/material.dart';");
  buffer.writeln('');

  buffer.writeln('class ThemeDataInfo {');
  buffer.writeln('  final String id;');
  buffer.writeln('  final Color color;');
  buffer.writeln('');
  buffer.writeln('  const ThemeDataInfo({');
  buffer.writeln('    required this.id,');
  buffer.writeln('    required this.color,');
  buffer.writeln('  });');
  buffer.writeln('}');
  buffer.writeln('');

  buffer.writeln('const kAppThemeColors = <String, ThemeDataInfo>{');
  for (final colorInfo in themeColors) {
    final colorValue = colorInfo.hex.replaceFirst('#', '0xFF');

    buffer.writeln("  '${colorInfo.id}': ThemeDataInfo(");
    buffer.writeln("    id: '${colorInfo.id}',");
    buffer.writeln('    color: Color($colorValue),');
    buffer.writeln('  ),');
  }
  buffer.writeln('};');

  if (!outputFile.parent.existsSync()) {
    outputFile.parent.createSync(recursive: true);
  }
  outputFile.writeAsStringSync(buffer.toString());
}
