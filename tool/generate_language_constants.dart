import 'dart:io';
import 'package:path/path.dart' as p;
import 'package:yaml/yaml.dart';

void main() {
  final i18nDir = Directory('i18n');
  final outputFile = File('lib/gen/language_constants.g.dart');

  if (!i18nDir.existsSync()) return;

  final languageFiles = i18nDir
      .listSync()
      .where((item) => item.path.endsWith('.i18n.yaml'))
      .toList();

  if (languageFiles.isEmpty) return;

  final locales = <Map<String, String>>[];
  final languageMap = <String, Map<String, String>>{};

  for (final file in languageFiles) {
    final content = File(file.path).readAsStringSync();
    final yaml = loadYaml(content) as YamlMap;
    final meta = yaml['meta'] as YamlMap;

    final localeCode = p.basenameWithoutExtension(
      p.basenameWithoutExtension(file.path),
    );

    final languageName = meta['languageName'] as String;
    final regionName = meta['regionName'] as String;

    final codeParts = localeCode.split('_');
    locales.add({
      'languageCode': codeParts[0],
      'countryCode': codeParts.length > 1 ? codeParts[1] : '',
    });

    languageMap[localeCode] = {
      'languageName': languageName,
      'regionName': regionName,
    };
  }

  final buffer = StringBuffer();

  buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
  buffer.writeln('// Generated by tool/generate_language_constants.dart');
  buffer.writeln('');
  buffer.writeln("import 'package:flutter/material.dart';");
  buffer.writeln('');

  buffer.writeln('const kSupportedLocales = [');
  for (final locale in locales) {
    final countryCode = locale['countryCode']!;
    buffer.writeln("  Locale('${locale['languageCode']}', '$countryCode'),");
  }
  buffer.writeln('];');
  buffer.writeln('');

  buffer.writeln('const kLanguageMap = {');
  for (final entry in languageMap.entries) {
    buffer.writeln("  '${entry.key}': {");
    buffer.writeln("    'languageName': '${entry.value['languageName']}',");
    buffer.writeln("    'regionName': '${entry.value['regionName']}',");
    buffer.writeln("  },");
  }
  buffer.writeln('};');

  if (!outputFile.parent.existsSync()) {
    outputFile.parent.createSync(recursive: true);
  }

  outputFile.writeAsStringSync(buffer.toString());
}
